7.	A CustomVector class is defined as follows: 
class CustomVector {
 public: 
// constructors and other public interface goes here 
private: 
// private data 
std::vector< double> elements; 
int length; 
};

(a) Design and code three constructors: 
(i) a constructor: that takes a single integer that indicates the size of vector; 
(ii) a constructor: that takes a length integer and an array of doubles to initialise the values; 
(iii) a copy constructor. 
(b) Give a example usage of each. 
(c) Explain the problem that would arise if we used dynamic memory allocation (C++-style new or C-style malloc) instead of using std::vector<>
(d) What mechanism shall be used to overcome the problems arising in part (c)?
(e) For CustomVector class, show how the square brackets operator (indexing operator) can be overloaded to return a given indexed element. Should this operator be a class member function, and if so will it be private or public

Answer:
#include <iostream>
#include<vector>
using namespace std;
class CustomVector {
 public:
     CustomVector(int x)
     {
         cout<<elements.size()<<"\n";
     }
    CustomVector(int x1,int x2)
     {
         length=x1;
         cout<<length<<"\n";
     }
     CustomVector(CustomVector &c2)
     {
         length=c2.length;
         cout<<length<<"\n";
     }
private:
std::vector< double> elements;
int length;
};
int main()
{
    CustomVector c(1);
    CustomVector c1(5,1);
    CustomVector c2=c1;
    int* CustomVector=new int[5];
return 0;
