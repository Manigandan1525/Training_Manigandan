2.	Explain abstraction for the following example: Implementation not required. 
You have an object Mobile Phone and have 3 mobile phones as following:-
N 142 (Features:- Calling, SMS)
N 271 (Features:- Calling, SMS, FM Radio, MP3, Camera)
B (Features:-Calling, SMS, FM Radio, MP3, Camera, Video Recording, Reading E-mails)
(Example could be in JAVA or C++)

Answer:
#include <iostream>
using namespace std;
class Mobile_N142
{
private:
	string name;
	int number;
public:
    void calling()
	{
		cout << "perform calling operation";
	}
	void sms()
	{
		cout << "sending sms";
	}
};
class Mobile_N271 :public Mobile_N142
{
private:
	string name;
	int number;
public:
	void FM()
	{
		cout << "using FM";
	}
	void mp3()
	{
		cout << "playing song";
	}
	void camera()
	{
		cout << "Take Photos";
	}
};
class Mobile_b :public Mobile_N271
{
private:
	string name;
	int number;
public:
	void videoRecording()
	{
		cout << "Recording videos";
	}
	void emails()
	{
		cout << "using emails";
	}
};
int main()
{
	Mobile_N142 n1;
	Mobile_N271 n2;
	Mobile_b b;
	return 0;
}
